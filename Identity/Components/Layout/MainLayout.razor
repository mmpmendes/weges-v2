@using ApiModel.Models
@using WebApp.Components.Account
@using WebApp.InMemory
@using Microsoft.AspNetCore.Identity
@using MudBlazor.Utilities
@using SharedKernel.DTO
@inherits LayoutComponentBase
@implements IDisposable
@inject SignInManager<WegesUser> SignInManager
@inject IdentityRedirectManager RedirectManager

@* Required *@
<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<MudLayout StickyHeader="true">
    <MudAppBar Style=@($"background:#C6893F")>
        Weges
    </MudAppBar>
    <MudDrawer Style=@($"background:#C6893F") Open="true">
        @*  @if (SelectedEstabelecimento is not null)
        {
            <!-- Top-right corner div -->
            <div class="btn profile-name bg-light">
                <span>
                    @SelectedEstabelecimento.Denominacao
                </span>
            </div>
        }

        @if (authState?.User.Identity is not null && authState.User.Identity.IsAuthenticated)
        {
            <div class="profile-name">
                <form action="/Account/Logout" method="post">
                    <AntiforgeryToken />
                    <button type="submit" class="btn btn-light">
                        Terminar Sessão
                    </button>
                </form>
            </div>
        }
        else
        {
            <div class="profile-name">
                <a class="btn btn-light" href="/Account/Login">Inicar sessão</a>
            </div>
        } *@
        <MudDrawerHeader Style="background-color: gainsboro;">
            <MudImage Src="images/weges_cor_logo_simb.png" Height="40"></MudImage>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <article class="content px-4">
            @Body
        </article>
    </MudMainContent>
</MudLayout>

@code {

    private EstabelecimentoDTO SelectedEstabelecimento { get; set; }

    [Inject] EstabelecimentoService EstabelecimentoService { get; set; } = default!;
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
    [Inject] NavigationManager NavigationManager { get; set; } = default!;
    private AuthenticationState? authState;

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    protected async override void OnInitialized()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        SelectedEstabelecimento = EstabelecimentoService.SelectedEstabelecimento;

        // Subscribe to the event
        EstabelecimentoService.OnEstabelecimentoChanged += async () => await HandleEstabelecimentoChanged();
    }

    private async Task HandleEstabelecimentoChanged()
    {
        await InvokeAsync(StateHasChanged); // Refresh UI
        SelectedEstabelecimento = EstabelecimentoService.SelectedEstabelecimento;
    }

    public void Dispose()
    {
        EstabelecimentoService.OnEstabelecimentoChanged -= async () => await HandleEstabelecimentoChanged();
    }
}
