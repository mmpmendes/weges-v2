@using ApiModel.Models
@using WebApp.Components.Account
@using WebApp.InMemory
@using Microsoft.AspNetCore.Identity
@using MudBlazor.Utilities
@using SharedKernel.DTO
@inherits LayoutComponentBase
@implements IDisposable
@inject SignInManager<WegesUser> SignInManager
@inject IdentityRedirectManager RedirectManager

@* Required *@
<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="@_theme"/>
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<MudLayout StickyHeader="true">
    <MudAppBar Color="Color.Secondary" Elevation="0">
        <MudSpacer/>
        @if (_isDarkMode)
        {
            <MudIconButton Icon="@Icons.Material.Filled.LightMode" aria-label="light" OnClick="updateThemeMode"/>
        }
        else
        {
            <MudIconButton Icon="@Icons.Material.Filled.DarkMode" aria-label="dark" OnClick="updateThemeMode"/>
        }
    </MudAppBar>
    <MudDrawer Color="Color.Primary" Open="true">
        @*  @if (SelectedEstabelecimento is not null)
        {
            <!-- Top-right corner div -->
            <div class="btn profile-name bg-light">
                <span>
                    @SelectedEstabelecimento.Denominacao
                </span>
            </div>
        }

        @if (authState?.User.Identity is not null && authState.User.Identity.IsAuthenticated)
        {
            <div class="profile-name">
                <form action="/Account/Logout" method="post">
                    <AntiforgeryToken />
                    <button type="submit" class="btn btn-light">
                        Terminar Sessão
                    </button>
                </form>
            </div>
        }
        else
        {
            <div class="profile-name">
                <a class="btn btn-light" href="/Account/Login">Inicar sessão</a>
            </div>
        } *@
        <MudDrawerHeader Style=@(_isDarkMode ? "background: none;background-color:#1E1E1E" : "background: none;background-color:#EFE6DA") >
            <MudImage Src="images/weges_cor_logo_simb.png" Height="40"></MudImage>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <article class="content px-3 py-3">
            @Body
        </article>
    </MudMainContent>
</MudLayout>

@code {
    private bool _isDarkMode = false;
    private MudTheme _theme = new();
    private MudThemeProvider _mudThemeProvider = default!;

    private EstabelecimentoDTO SelectedEstabelecimento { get; set; } = default!;

    [Inject] EstabelecimentoService EstabelecimentoService { get; set; } = default!;
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
    [Inject] NavigationManager NavigationManager { get; set; } = default!;
    private AuthenticationState? authState;

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    protected async override void OnInitialized()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        SelectedEstabelecimento = EstabelecimentoService.SelectedEstabelecimento;

        // Subscribe to the event
        EstabelecimentoService.OnEstabelecimentoChanged += async () => await HandleEstabelecimentoChanged();

        _theme = new MudTheme()
        {
            PaletteLight = new PaletteLight()
            {
                Primary = "#C6893F",
                Secondary = "#EFE6DA",
                Tertiary = "#A6A6A6",
                Background = "#F5F5F5",
                Surface = "#EFE6DA",
                TextPrimary = "#212121"
            },
            PaletteDark = new PaletteDark()
            {
                Primary = "#C6893F",
                Secondary = "#1E1E1E",
                Tertiary = "#9E9E9E",
                Background = "#121212",
                Surface = "#1E1E1E",
                TextPrimary = "#E0E0E0"
            },

            // LayoutProperties = new LayoutProperties()
            // {
            //     DrawerWidthLeft = "260px",
            //     DrawerWidthRight = "300px"
            // }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private async Task HandleEstabelecimentoChanged()
    {
        await InvokeAsync(StateHasChanged); // Refresh UI
        SelectedEstabelecimento = EstabelecimentoService.SelectedEstabelecimento;
    }

    public void Dispose()
    {
        EstabelecimentoService.OnEstabelecimentoChanged -= async () => await HandleEstabelecimentoChanged();
    }
    private Task updateThemeMode(MouseEventArgs args)
    {
        _isDarkMode = !_isDarkMode;
        return Task.CompletedTask;
    }
    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
