@page "/Account/Register"
@layout Layout.LoginLayout

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<WegesUser> UserManager
@inject IUserStore<WegesUser> UserStore
@inject SignInManager<WegesUser> SignInManager
@inject IEmailSender<WegesUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Registo</PageTitle>

<MudText Typo="Typo.h5">Registo</MudText>

<MudGrid>
    <MudItem xs="6">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <MudText Typo="Typo.h6">Crie nova conta.</MudText>
            <hr /> 
            <ValidationSummary class="text-danger" role="alert" />
            <MudGrid>
                <MudItem xs="12">
                    <div class="mud-input-control-input-container">
                        <div class="mud-input mud-input-text mud-input-text-with-label mud-input-underline mud-ltr mud-typography-subtitle1">
                            <InputText @bind-Value="Input.Email" id="Input.Email" class="mud-input-slot mud-input-root mud-input-root-text" aria-required="true" placeholder="Email" />
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>
                    </div>
                </MudItem>
                <MudItem xs="12">
                    <div class="mud-input-control-input-container">
                        <div class="mud-input mud-input-text mud-input-text-with-label mud-input-underline mud-ltr mud-typography-subtitle1">
                            <InputText type="password"  autocomplete="new-password" @bind-Value="Input.Password" id="Input.Password" class="mud-input-slot mud-input-root mud-input-root-text" aria-required="true" placeholder="Palavra passe" />
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>
                    </div>
                </MudItem>
                <MudItem xs="12">
                    <div class="mud-input-control-input-container">
                        <div class="mud-input mud-input-text mud-input-text-with-label mud-input-underline mud-ltr mud-typography-subtitle1">
                            <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="mud-input-slot mud-input-root mud-input-root-text" autocomplete="new-password" aria-required="true" placeholder="Palavra passe" />
                            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                        </div>
                    </div>
                </MudItem>
            </MudGrid>
            <MudItem Class="py-3">
                <button type="submit" class="mud-button-root mud-button mud-button-filled mud-button-filled-primary mud-button-filled-size-medium mud-ripple">Registar</button>
            </MudItem>
        </EditForm>
    </MudItem>
    <MudItem xs="6">
        <MudText Typo="Typo.h5">Use uma conta externa para se registar.</MudText>
        <MudSpacer />
        <ExternalLoginPicker />
    </MudItem>
</MudGrid>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; } = "Home";

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private WegesUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<WegesUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(WegesUser)}'. " +
                $"Ensure that '{nameof(WegesUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<WegesUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<WegesUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
