@page "/"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ApiModel.Models

@inject SignInManager<WegesUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<AuthorizeView>
    <Authorized Context="authorized">
        Bem-vindo ao Weges, @authorized.User.Identity.Name!
    </Authorized>
    <NotAuthorized Context="notAuthorized">

        <PageTitle>Entrar</PageTitle>

        <h1>Autenticação</h1>
        <div class="row">
            <div class="col-lg-6">
                <section>
                    <StatusMessage Message="@errorMessage" />
                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                        <DataAnnotationsValidator />
                        <hr />
                        <ValidationSummary class="text-danger" role="alert" />
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="nome@exemplo.com" />
                            <label for="Input.Email" class="form-label">Email</label>
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="palavra-passe" />
                            <label for="Input.Password" class="form-label">Palavra-passe</label>
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>
                        <div class="checkbox mb-3">
                            <label class="form-label">
                                <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                                Lembrar-me
                            </label>
                        </div>
                        <div>
                            <button type="submit" class="w-100 btn btn-lg btn-dark">Entrar</button>
                        </div>
                        <div>
                            <p>
                                <a href="Account/ForgotPassword">Esqueceu a sua palavra-passe?</a>
                            </p>
                            <p>
                                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Registe uma nova conta</a>
                            </p>
                            <p>
                                <a href="Account/ResendEmailConfirmation">Reenviar email de confirmação</a>
                            </p>
                        </div>
                    </EditForm>
                </section>
            </div>
            <div class="col-lg-4 col-lg-offset-2">
                <section>
                    <h3>Use another service to log in.</h3>
                    <hr />
                    <ExternalLoginPicker />
                </section>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {

    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();



    [SupplyParameterFromQuery]

    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo("estabelecimentos");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Erro: Tentativa de autenticação falhada.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Lembrar-me?")]
        public bool RememberMe { get; set; }
    }
}
