@page "/Account/Login"
@page "/"
@layout Layout.LoginLayout

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<WegesUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IConfiguration Configuration;

<PageTitle>Autenticação</PageTitle>

<AuthorizeView>
<NotAuthorized Context="NotAuth">
<MudGrid>
    <MudItem xs="12">
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="@LoginUser" FormName="login">
            <MudText Typo="Typo.h5" Color="Color.Primary">Autenticação</MudText>
            <DataAnnotationsValidator />
            <MudSpacer />
            <ValidationSummary class="text-danger" role="alert" />
            <MudItem xs="12">
                <div class="color-primary mud-input mud-input-text mud-input-text-with-label mud-input-underline mud-ltr mud-typography-subtitle1 mud-grid-item mud-grid-item-xs-12">
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="color-primary mud-input-slot mud-input-root mud-input-root-text mud-grid-item mud-grid-item-xs-12 full-width" aria-required="true" placeholder="Email" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
            </MudItem>
            <MudItem xs="12">
                <div class="color-primary mud-input mud-input-text mud-input-text-with-label mud-input-underline mud-ltr mud-typography-subtitle1 mud-grid-item mud-grid-item-xs-12">
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="color-primary mud-input-slot mud-input-root mud-input-root-text mud-grid-item mud-grid-item-xs-12 full-width" aria-required="true" placeholder="Palavra passe" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
            </MudItem>
            <MudItem xs="12">
                <MudCheckBox @bind-Value="Input.RememberMe" Label="Lembrar-me" Color="Color.Primary" Class="color-primary" />
            </MudItem>
            <MudItem xs="12" Class="mt-1">
                <button type="submit" class="mud-button-root mud-button mud-button-filled mud-button-filled-primary mud-button-filled-size-medium mud-ripple">Entrar</button>
            </MudItem>
            <MudItem Class="py-3">
                <MudItem xs="12" Class="mt-0">
                    <MudLink Href="Account/ForgotPassword">Esqueceu a sua palavra passe?</MudLink>
                </MudItem>
                <MudItem xs="12" Class="mt-0">
                    <MudLink Href="/Account/Register">Registe uma nova conta</MudLink>
                </MudItem>
                <MudItem xs="12" Class="mt-0">
                    <MudLink Href="Account/ResendEmailConfirmation">Reenviar email de confirmação</MudLink>
                </MudItem>
            </MudItem>
        </EditForm>
    </MudItem>
    <MudItem xs="12">
        <MudText Typo="Typo.h5" Color="Color.Primary">Entre com uma conta externa.</MudText>
        <MudSpacer />
        <ExternalLoginPicker />
    </MudItem>

</MudGrid>
    </NotAuthorized>
    <Authorized>
        <h2>Olá, @context.User.Identity.Name!</h2>
    </Authorized>
</AuthorizeView>

@code {
    private string? errorMessage;
    [Inject] IHttpContextAccessor HttpContextAccessor { get; set; } = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext is not null && HttpMethods.IsGet(httpContext.Request.Method))
        {
            await httpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }

        if (httpContext is not null && httpContext.User.Identity is not null && httpContext.User.Identity.IsAuthenticated)
        {
            ReturnUrl ??= "Home";
            RedirectManager.RedirectTo(ReturnUrl);
        }
    }

    public async Task LoginUser()
    {
        var configEmail = Configuration["Admin:Email"];
        if (Input.Email != configEmail)
        {
            return;
        }

        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Lembrar-me?")]
        public bool RememberMe { get; set; }
    }
}
