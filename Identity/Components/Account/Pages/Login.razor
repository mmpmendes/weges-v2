@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<WegesUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Autenticação</PageTitle>

<MudText Typo="Typo.h5">Autenticação</MudText>
<MudGrid>
    <MudItem xs="6">
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="@LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <MudText Typo="Typo.h6">Use a sua conta Weges para entrar.</MudText>
            <MudSpacer />
            <ValidationSummary class="text-danger" role="alert" />
            <MudItem xs="6">
                <MudTextField @bind-Value="Input.Email" Label="Email" InputType="InputType.Email"/>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </MudItem>
            <MudItem xs="6">
                <MudTextField InputType="InputType.Password" @bind-Value="Input.Password" Label="Palavra passe"/>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </MudItem>
            <MudItem xs="6">
                <MudCheckBox @bind-Value="Input.RememberMe" Label="Lembrar-me"/>
            </MudItem>
            <MudItem>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">Entrar</MudButton>
            </MudItem>
            <MudItem Class="py-3">
                <MudItem>
                    <MudLink Href="Account/ForgotPassword">Esqueceu a sua palavra passe?</MudLink>
                     </MudItem>
                <MudItem>
                    <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" >Registe uma nova conta</MudLink>
                </MudItem>
                <MudItem>
                    <MudLink Href="Account/ResendEmailConfirmation">Reenviar email de confirmação</MudLink>
                </MudItem>
            </MudItem>
        </EditForm>
    </MudItem>
    <MudItem xs="6">
        <MudText Typo="Typo.h5">Entre com uma conta externa.</MudText>
        <MudSpacer />
        <ExternalLoginPicker />
    </MudItem>
</MudGrid>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
